// Generated by LiveScript 1.2.0
var io, uid, socks, rooms, part;
io = require('socket.io').listen(9980);
uid = 0;
socks = {};
rooms = {};
part = function(uid){
  var sock, uidOther;
  if (!(sock = socks[uid])) {
    return;
  }
  delete socks[uid];
  if (sock.rid != null) {
    delete rooms[sock.rid][uid];
    for (uidOther in rooms[sock.rid]) {
      if (socks[uidOther] != null) {
        socks[uidOther].emit('part', uid);
      }
    }
    for (uidOther in rooms[sock.rid]) {
      return;
    }
    delete rooms[sock.rid];
  }
};
io.sockets.on('connection', function(socket){
  do {
    uid++;
  } while (socks[uid] != null);
  socket.uid = uid;
  socks[uid] = socket;
  socket.emit('uid', uid);
  socket.on('sdp', function(data){
    if (data.to != null && socks[data.to] != null) {
      data.from = socket.uid;
      socks[data.to].emit('sdp', data);
    }
  });
  socket.on('ice', function(data){
    if (data.to != null && socks[data.to] != null) {
      data.from = socket.uid;
      socks[data.to].emit('ice', data);
    }
  });
  socket.on('join', function(data){
    var uid, ref$;
    if (!data.roomid) {
      return;
    }
    for (uid in rooms[data.roomid]) {
      if ((ref$ = socks[uid]) != null) {
        ref$.emit('join', socket.uid);
      }
    }
    if (!(data.roomid in rooms)) {
      rooms[data.roomid] = {};
    }
    rooms[data.roomid][socket.uid] = socket;
  });
  socket.on('part', function(){
    part(socket.uid);
  });
  socket.on('disconnect', function(){
    part(socket.uid);
  });
});