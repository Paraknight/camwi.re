// Generated by LiveScript 1.2.0
var io, uid, socks, rooms;
io = require('socket.io').listen(9980);
uid = 0;
socks = {};
rooms = {};
io.sockets.on('connection', function(socket){
  do {
    uid = (uid + 1) % (Number.MAX_SAFE_INTEGER + 1);
  } while (socks[uid] != null);
  socket.uid = uid;
  socks[uid] = socket;
  socket.emit('uid', uid);
  socket.on('sdp', function(data){
    if (data.to != null && socks[data.to] != null) {
      data.from = socket.uid;
      socks[data.to].emit('sdp', data);
    }
  });
  socket.on('ice', function(data){
    if (data.to != null && socks[data.to] != null) {
      data.from = socket.uid;
      socks[data.to].emit('ice', data);
    }
  });
  socket.on('new', function(data){
    if (data.to != null && socks[data.to] != null) {
      socks[data.to].emit('join', data['new']);
    }
  });
  socket.on('join', function(data, callback){
    if (!data.roomid) {
      return;
    }
    if (data.roomid in rooms) {
      rooms[data.roomid].host.emit('join', socket.uid);
      if (typeof callback === 'function') {
        callback(true);
      }
    } else {
      rooms[data.roomid] = {
        host: socket
      };
      if (typeof callback === 'function') {
        callback(false);
      }
    }
  });
  socket.on('part', function(data){
    if (data.to != null && socks[data.to] != null) {
      socks[data.to].emit('part', socket.uid);
    }
  });
  socket.on('disconnect', function(){
    delete socks[socket.uid];
  });
});